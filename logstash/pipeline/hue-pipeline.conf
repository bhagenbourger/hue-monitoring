# The # character at the beginning of a line indicates a comment. Use
# comments to describe your configuration.
input {
  beats {
    port => 5044
  }
}

# The filter part of this file is commented out to indicate that it is
# optional.
filter {
  if ![http][json_namespace] {
    drop { }
  }
  java_filter_hue { 
      lights => "[http][json_namespace][lights]"
      sensors => "[http][json_namespace][sensors]" 
  }

  # Handle lights
  if([@metadata][HUE_SOURCE_FIELD_METADATA] == "[http][json_namespace][lights]") {

    # Keep only relevant fields
    prune { whitelist_names => ["^name", "@timestamp", "state"] }

    #  # Clone and mark as an alert
    clone {
      clones => [ "alertEvent" ]
    }
  
    # Handle clone for alerting
    if [type] == "alertEvent" {
      # Query ES to check last values
      elasticsearch {
        hosts => ["elasticsearch01:9200","elasticsearch02:9200"]
        index => "lights"
        result_size => 1
        sort => "@timestamp:desc"
        query => "name.keyword:%{[name]}"
        fields => { 
          "[state][on]" => "[state][last][on]"
          "[state][reachable]" => "[state][last][reachable]"
        }
      }
  
      # State reachable changes, add alert message
      if [state][last][reachable] != [state][reachable] {
        if [state][reachable] {
          mutate {
            add_field => { "[alert][message]" => "${ALERT_MESSAGE_LIGHT_REACHABLE}" }
          }
        } else {
          mutate {
            add_field => { "[alert][message]" => "${ALERT_MESSAGE_LIGHT_NOT_REACHABLE}" }
          }
        }
      } 
      # Light went on, add alert message
      else if [state][on] and [state][last][on] != [state][on] {
        mutate {
          add_field => { "[alert][message]" => "${ALERT_MESSAGE_LIGHT_ON}" }
        }
      }
      # If state on and state reachable don't change => drop clone
      else {
        drop { }
      }
    }
    # Compute switch on
    else {
      if([state][on]) {
        elasticsearch {
          hosts => ["elasticsearch01:9200","elasticsearch02:9200"]
          index => "lights"
          result_size => 1
          sort => "@timestamp:desc"
          query => "name.keyword:%{[name]}"
          fields => { 
            "[state][on]" => "[state][switchon]"
          }
        }
        if([state][switchon]){
          mutate {
            update => { "[state][switchon]" => "false" }
          }
        } else {
          mutate {
            update => { "[state][switchon]" => "true" }
          }
        }
      } else {
        mutate { 
          add_field => { "[state][switchon]" => "false" }
        }
      }
    }
  }

  # Handle temperature sensors
  else if([@metadata][HUE_SOURCE_FIELD_METADATA] == "[http][json_namespace][sensors]") {

    # Temperature must be divided by 100
    ruby { code => "event.set('temperature', event.get('[state][temperature]').to_f / 100)" }

    # Keep only relevant fields
    prune { whitelist_names => ["^name", "@timestamp", "temperature"] }
  }
}

output {

  # Handle lights
  if([@metadata][HUE_SOURCE_FIELD_METADATA] == "[http][json_namespace][lights]") {

    # If is an alert => send to slack
    if [type] == "alertEvent" {
      http {
        http_method => "post"
        url => "${SLACK_ENDPOINT}"
        mapping => [
          "text", "%{[alert][message]}"
        ]
      }
    }

    # Else => send to ES
    else {
      elasticsearch {
        hosts => ["elasticsearch01:9200","elasticsearch02:9200"]
        manage_template => true
        template => "/usr/share/logstash/templates/lights_template.json"
        template_name => "lights_template"
        index => "lights-${INDICES_TEMPORAL_PATTERN}" 
        document_type => "%{[@metadata][type]}" 
      }
    }
  }

  # Handle temperature sensors
  else if([@metadata][HUE_SOURCE_FIELD_METADATA] == "[http][json_namespace][sensors]") {
    # Send to ES
    elasticsearch {
      hosts => ["elasticsearch01:9200","elasticsearch02:9200"]
      manage_template => true
      template => "/usr/share/logstash/templates/sensors_template.json"
      template_name => "sensors_template"
      index => "sensors-${INDICES_TEMPORAL_PATTERN}" 
      document_type => "%{[@metadata][type]}" 
    }
  }
}